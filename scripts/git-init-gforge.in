#!/bin/bash

# Copyright (C) 2012 Vincent Danjean <Vincent.Danjean@ens-lyon.org>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

DATADIR="@pkgdatadir@"

#######################################################
# LSB

if [ -f /lib/lsb/init-functions ]; then
         . /lib/lsb/init-functions
else
         log_warning_msg () {
            echo "${@}."
         }

         log_success_msg () {
            echo "${@}."
         }

         log_daemon_msg () {
            echo -n "${1}: $2"
         }

         log_end_msg () {
            if [ $1 -eq 0 ]; then
              echo "."
            elif [ $1 -eq 255 ]; then
              /bin/echo -e " (warning)."
            else
              /bin/echo -e " failed!"
            fi
         }
fi
#######################################################

set -e

cur_forge=
list_forges=
cur_project=

forge_switch() { # hostname
	cur_forge="$(echo "$1" | tr .- __)"
	case " $list_forges  " in
	*" $cur_forge "*) ;;
	*) list_forges+=" $cur_forge" ;;
	esac
	project_switch ""
}

forge_set() { # var value
	if [ "$cur_forge" = "" ]; then
		echo 2>&1 "Internal error: no forge selected to set '$1' to '$2'"
		exit 1
	fi
	eval "${cur_forge}_$1="'"$2"'
}

forge_get() { # var default
	local val
	if [ "$1" = --nocheck ]; then
		shift
	else
		if [ "$cur_forge" = "" ]; then
			echo 2>&1 "Internal error: no forge selected to get '$1'"
			exit 1
		fi
	fi
	eval 'val="$'"${cur_forge}_$1"'"'
	echo "${val:-"$2"}"
}

forge_list() {
	local list="$list_forges"
	local i
	local oldf="$cur_forge"
	local oldp="$cur_project"
	for i in $list ; do
		forge_switch "$i"
		echo "$(forge_get prio 50) $(forge_get hostname)"
	done | sort -n | sed -e 's/^[0-9]\+ \+//'
	cur_forge="$oldc"
	cur_project="$oldp"
}

project_switch() { # projectname
	if [ "$cur_forge" = "" -a "$1" != "" ]; then
		echo 2>&1 "Internal error: no forge selected when selecting project '$1'"
		exit 1
	fi
	cur_project="$(echo "$1" | tr .- __)"
	local list_projects="$(forge_get projlist "")"
	case " $list_projects  " in
	*" $cur_project "*) ;;
	*) echo "registering $cur_project in $cur_forge"
	   forge_set projlist "$list_projects $cur_project" ;;
	esac
}

project_set() { # var value
	if [ "$cur_project" = "" ]; then
		echo 2>&1 "Internal error: no project selected to set '$1' to '$2'"
		exit 1
	fi
	eval "${cur_forge}_proj_${cur_project}_$1="'"$2"'
}

project_get() { # var default
	local val
	if [ "$1" = --nocheck ]; then
		shift
	else
		if [ "$cur_project" = "" ]; then
			echo 2>&1 "Internal error: no project selected to get '$1'"
			exit 1
		fi
	fi
	eval 'val="$'"${cur_forge}_proj_${cur_project}_$1"'"'
	echo "${val:-"$2"}"
}

project_list() {
	local list="$(forge_get projlist "")"
	local i
	local oldf="$cur_forge"
	local oldp="$cur_project"
	for i in $list ; do
		project_switch "$i"
		echo "$(project_get prio 50) $(project_get name)"
	done | sort -n | sed -e 's/^[0-9]\+ \+//'
	cur_forge="$oldc"
	cur_project="$oldp"
}

declare_forge() {
	local TEMP
	TEMP=$(getopt -o '' \
	    --long hostname:,description:,priority:,projectsgitroot:,install-hooks: \
		-n "while creating forge" -- "$@")
	eval set -- "$TEMP"
	while [ "$#" != 0 ] ; do
		case "$1" in
		--hostname)
			forge_switch "$2"
			forge_set hostname "$2"
			shift ;;
		--description)
			forge_set desc "$2"
			shift ;;
		--priority)
			forge_set prio "$2"
			shift ;;
		--projectsgitroot)
			forge_set proot "$2"
			shift ;;
		--install-hooks)
			forge_set install_hooks "$2"
			shift ;;
		--) shift ; break ;;
		*)
			echo 1>&2 "Error while describing a forge: '$1'"
			exit 1 ;;
		esac
		shift
	done
	TEMP=$(getopt -o '' --long projectname:,description:,priority: \
		-n "while creating project for $(forge_get hostname)" -- "$@")
	eval set -- "$TEMP"
	while [ "$#" != 0 ] ; do
		case "$1" in
		--projectname)
			project_switch "$2"
			project_set name "$2"
			shift ;;
		--description)
			project_set desc "$2"
			shift ;;
		--priority)
			project_set prio "$2"
			shift ;;
		--)
			shift
			if [ "$#" = 0 ] ; then break ; fi
			TEMP=$(getopt -o '' --long projectname:,description:,priority: \
				 -n "creating project" -- "$@")
			eval set -- "$TEMP"
			project_switch ""
			continue ;;
		*)
			echo 1>&2 "Error while describing a project: '$1'"
			exit 1 ;;
		esac
		shift
	done
}

#######################################################
exec_options() {
	local next=1
	local RET
	local funcname="$1"
	declare -a opts
	local f p

	exec_option() {
		eval "$funcname" '"$@"'
	} 

	while test "$next" != 9; do
		RET=0
		case "$next" in
		0) ;;
		1) exec_option action \
			string "Action à effectuer" \
			help "Que faire ?" \
			choice "" "Lister les dépôts Git existants" list \
			choice default "Créer un nouveau dépôt Git" create \
			choice "" "Simuler la création d'un nouveau dépôt Git" simulate \
		    || RET=$?  ;;	
		2) opts=(
		   )
		   for f in $(forge_list) ; do
			forge_switch "$f"
			opts=( "${opts[@]}" \
			  choice "" "$(forge_get desc "No description")" \
			    "$(forge_get hostname "No hostname")" )
		   done
		   opts=( "${opts[@]}" \
			choice "input nonnull" "Autre" "" )
		   opts[1]="${opts[1]} default"
		   exec_option forge_hostname \
			string "Forge à utiliser" \
			help "Indiquer le nom de la machine de la forge accessible par SSH" \
			help "." \
			help "Quelques forges sont pré-renseignées ici et" \
			help "proposent des réglages adaptés aux questions suivantes" \
			"${opts[@]}" \
		    || RET=$?
		    forge_switch "$forge_hostname" ;;	
		3) exec_option forge_login \
			string "Login à utiliser pour accéder à la forge" \
			choice default "Current login" "$LOGNAME" \
			choice "input nonnull" "Autre" "" \
		    || RET=$?  ;;
		4) opts=(
		     choice "" "Compte utilisateur (pas de rattachement à un projet particulier)" user \
		   )
		   if [ "$forge_hostname" != "" ]; then
		     for p in $(project_list) ; do
			project_switch "$p"
			opts=( "${opts[@]}" \
			  choice "" "$(project_get desc "No description")" \
			    "$(project_get name "No name")" )
		     done
		   fi
		   opts=( "${opts[@]}" \
		     choice "input nonnull" "Autre" "" )
		   opts[5]="${opts[5]} default"
		   exec_option forge_project \
			string "Nom du projet de la forge dans lequel créer le dépôt git" \
			"${opts[@]}" \
		    || RET=$?
		   project_switch "$forge_project" ;;
		5) opts=()
		   case "$forge_project" in
		   user)
		     opts=(
		       choice default "GitRoot du compte personnel" "\$HOME/public_git" \
		     ) ;;
		   *)
		     p="$(forge_get --nocheck proot "")"
		     f=""
		     if [ "$p" = "" ]; then
		       opts=( \
			choice "" "GitRoot du projet choisi" "/scmrepos/git/$forge_project" \
			choice "" "GitRoot du projet choisi" "/gitroot/$forge_project" \
			choice "" "GitRoot du projet choisi" "/git/$forge_project" \
		       )
		       f="default"
		     else
		       opts=(
		         choice default "GitRoot du projet choisi" "$p/$forge_project" \
		       )
		     fi
		   esac
		   exec_option forge_gitroot \
			string "Chemin vers le répertoire racine des dépôts Git sur la forge" \
			help "Pour les forges connues, le choix proposé par défaut" \
			help "est correct. Pour les autres, une sélection classique vous est" \
			help "proposée. Il peut être utile de vérifier (mais ce" \
			help "programme vous indiquera plus tard s'il y a un problème)" \
			"${opts[@]}" \
			choice "input nonnull $f" "Autre" "" \
		    || RET=$?  ;;
		6) exec_option name \
			string "Nom du dépôt Git à créer" \
			help "Préfixez le nom par la date (au moins l'année)" \
			help "pour des projets localisés dans le temps" \
			help "." \
			help "Exemples: 2012_RenPar, 2012_RenPar_GPU, ..." \
			choice "input default nonnull" "Nom du projet git" "" \
		    || RET=$?  ;;
		7) exec_option desc \
			string "Description rapide du dépôt Git à créer" \
			help "Une ligne maximum" \
			help "." \
			help "Exemples: papier pour la conférence RenPar 2012 sur les GPU" \
			choice "input default nonnull" "Description du projet git" "" \
		    || RET=$?  ;;
		8) case "$forge_hostname,$forge_project" in
		   *gforge.inria.fr,moais|*gforge.inria.fr,memo|*gforge.inria.fr,mescal)
			opt1=default
			opt2="" ;;
		   *)
			opt1=""
			opt2=default ;;
		   esac
		   exec_option forge_subdir \
			string "Sous-répertoire pour le projet" \
			help "Les gros projets (memo, ...) structurent les dépôts Git" \
			help "dans une hiérarchie de répertoires" \
			help "N'hésitez pas à proposer d'améliorer cette hiérarchie" \
			choice "$opt1" "Articles de conférences, ..." papers/articles \
			choice "" "Rapport de master, thèses, ..." papers/master_reports \
			choice "" "Appels à projets, délivrables texte, ..." papers/projects \
			choice "" "Chapitres de livres" papers/book_chapters \
			choice "" "Livres" papers/books \
			choice "" "Résultats d'expériences" software/expe \
			choice "" "Outils logiciels" software/tools \
			choice "$opt2" "À la racine du projet" "" \
			choice input "Autre" "" \
		    || RET=$?  ;;
		esac
		case "$RET" in
		10) next=$(( $next - 1 )) ;;
		20) ;;
		0) next=$(( $next + 1 ))
		   if test "$next" = 6 -a "$action" = list ; then
		     next=$(( $next + 3 ))
		   fi
		   ;;
		1) return 1 ;;
		*) error arghhh ;;
		esac
	done
}
#######################################################

display_all() {
	local varname="$1"
	local vartype="$2"
	local text="$3"
	shift; shift; shift
	echo "#########################"
	echo "$vaname ($vartype): $text"
	while test "$#" != 0; do
		case "$1" in
		help) 
			echo "  $2"
			shift;;
		choice)
			echo "* $4: $3";
			shift; shift; shift;;
		*)
			error "display_all: problem with '$1'";;
		esac
		shift
	done
}

set_default() {
	local varname="$1"
	local vartype="$2"
	local text="$3"
	shift; shift; shift
	while test "$#" != 0; do
		case "$1" in
		help) 
			shift;;
		choice)
			case " $2 " in
			*\ default\ *)
				eval "$varname"'="$4"'
				return
				;;
			esac
			shift; shift; shift;;
		*)
			error "set_default: problem with '$1'";;
		esac
		shift
	done
}

run_dialog() {
	local varname="$1"
	local vartype="$2"
	local text="$3"
	local help_txt=""
	local has_help=
	local has_input=
	local count=1
	local val=
	local inputentry=
	local inputoptions=
	local inputval=
	eval local tag='"$'"$varname"'_tag"'
	eval local input='"$'"$varname"'_input"'
	declare -a dopt
	declare -a dchoice
	declare -a choices
	dopt=( --title "$3" --cancel-label "Précédent" --extra-button --extra-label "Éditer" )
	dhelp=()
	dchoice=()
	choices=()
	shift; shift; shift
	while test "$#" != 0; do
		case "$1" in
		help)
			if test -z "$has_help" ; then
				has_help=1
				dopt+=(--help-button)
			fi
			case "$2" in
			".") help_txt+="\n" ;;
			*) help_txt+="$2 " ;;
			esac
			shift;;
		choice)
			val="$4"
			case " $2 " in
			*\ default\ *)
				if test -z $tag; then 
					dopt+=('--default-item' "$count")
				fi
				;;
			esac
			case " $2 " in
			*\ input\ *)
				inputentry="$count"
				inputoptions="$2"
				if ! test -z "$tag"; then 
					val="$input"
					inputval="$input"
				fi
				;;
			esac
			if test "$tag" = "$count" ; then
				dopt+=('--default-item' "$count")
			fi
			dchoice+=("$count" "$3 [$val]")
			choices+=("$val")
			count=$(($count + 1))
			shift; shift; shift;;
		*)
			error "run_dialog: problem with '$1'";;
		esac
		shift
	done
	# cancel => Précédent (3)
	# help => Aide (2)
	# ok => Accepter (0)
	# extra => Éditer (4)
	# ESC => abort (1)
	local RET
	local C
	if test "$tag" = 0; then
		C="$inputentry"
		RET=0
		tag="$inputentry"
		inputval="$input"
		eval "$varname"'_tag="$C"'
	else
		C="$(
		  env DIALOG_CANCEL=3 DIALOG_ERROR=255 DIALOG_ESC=1 DIALOG_HELP=2 DIALOG_OK=0 DIALOG_EXTRA=4 \
		  dialog "${dopt[@]}" --menu "" 0 0 10 "${dchoice[@]}" 2>&1 >/dev/tty)"
		RET="$?"
        fi
	if [ "$RET" = 0 -a "$C" = "$inputentry" -a -z "$inputval" -a "$C" != "$tag" ]; then
		RET=4
	fi
	case "$RET" in
	0) 
		if test "$C" = "$inputentry" ; then
			val="$inputval"
			case " $inputoptions " in
			*\ nonnull\ *)
				if test -z "$val" ; then
					dialog --title "ERREUR : $text" --ok-label "Retour" --msgbox \
						"Une valeur vide n'est pas autorisée ici" 0 0
					return 20
				fi ;;
			esac
		else
			val=$(( $C - 1 ))
			val="${choices[$val]}"
		fi
		eval "$varname"'="$val"'
		eval "$varname"'_tag="$C"'
		if ! test -z "$inputentry"; then
			eval "$varname"'_input="$inputval"'
		fi
	  ;;
	1) return 1 ;; 
	3) return 10 ;;
	4)
		C="$(dialog --title "$text" --inputbox "$help_txt" 0 0 "$inputval" 2>&1 >/dev/tty)"
		RET="$?"
		case "$RET" in
		0)	inputval="$C"
			eval "$varname"'_tag="$inputentry"'
			eval "$varname"'_input="$inputval"'
			;;
		esac
		return 20 ;;
	2) dialog --title "$text" --ok-label "Retour" --msgbox "$help_txt" 0 0
	   return 20 ;;
	127) error "dialog seems missing. Please, check if it is really available" ;;
	*) error "argh:$RET" ;;
	esac
}

show_setup() {
	local varname="$1"
	local vartype="$2"
	local text="$3"
	eval local val='"$'"$varname"'"'
	txt_setup+=("$val" "$text")

}

echo_setup() {
	local varname="$1"
	local vartype="$2"
	local text="$3"
	eval local val='"$'"$varname"'"'
	echo "$varname = '$val'"

}

echo_args() {
	local varname="$1"
	local vartype="$2"
	local text="$3"
	eval local val='"$'"$varname"'"'
	local motif="'"
	local subst="'\\''"
	printf " --%s='%s'" "${varname//_/-}" "${val//$motif/$subst}"

}

print_args() {
    getopt -- "" -- "$@" | sed -e s'/^ -- //'
}

runtest() {
	local name= logvalue= error= RET=0 options= input=
	local output_var=
	local out=
	local dry_skip=
	local dry_log=

	echo2() { echo "# $2" ; }

	if [ "$dry_run" = 1 ]; then
		dry_skip="true"
		dry_log=echo2
	fi

	while test "$#" != 0 ; do
		case "$1" in
		name) name="$2"; shift ;;
		logvalue) logvalue="$2"; shift;;
		error) error+="$2\n"; shift;;
		input) input+="$2"; shift;;
		option) options+="$2 "; shift;;
		output-var) output_var="$2"; shift;;
		cmd) shift ; break ;;
		*) error pb ;;
		esac
		shift
	done
	
	$dry_log log_daemon_msg "$name" "$logvalue"
	if [ "$dry_run" = 1 ]; then
		print_args "$@"
		case " $options " in
		*\ warn-only\ *) RET=255 ;;
		esac
	else
		if [ -z "$input" ]; then
			out="$( "$@" 2>&1 )" || RET="$?"
		else
			out="$( echo "$input" | "$@" 2>&1 )" || RET="$?"
		fi
		case " $options " in
		*\ warn-only\ *) test "$RET" = 0 || RET=255 ;;
		esac
		$dry_skip log_end_msg "$RET" || true
		if test "$RET" != 0; then
			case " $options " in
			*\ allow-fail\ *)
				if ! test -z "$error"; then
					echo
					echo -e "$error"
				fi
				;;
			*\ silent\ *) ;;
			*)
				if [ -z "$input" ]; then
					printf "CMD: "
				else
					printf "%s" "CMD: echo \"$input\" | "
				fi
				print_args "$@"
				echo "$out"
				echo
				echo "ERREUR :"
				echo -e "$error"
				;;
			esac
		else
		    case " $options " in
			*\ print\ *)
			    echo
			    echo "$out" ;;
		    esac
		fi
		if test -n "$output_var"; then
		    eval $output_var='"$out"'
		fi
	fi
	return $RET
}

error() {
	echo 1>&2 "$@"
	exit 1
}

opt_help() {
	local varname="$1"
	local optname="${varname//_/-}"
	local text="$3"

	printf "\t--%-20s $text\n" "$optname value"
}

show_help() {
	echo "Utilisation : $(basename $0) [options]"
	echo "Options :"
	printf "\t--%-20s Cette aide\n" "help"
	printf "\t-n|--%-17s Montre juste les commandes sans les exécuter\n" "dry-run"
	exec_options opt_help
	echo
	echo "Sans option, le programme est interractif et propose des valeurs"
	echo "par défaut raisonnables (en particulier pour écrire un papier)"
	echo
}

#######################################################
for forge in "$DATADIR/forges/"*.sh ; do
    source "$forge"
done

dry_run=
debug=

long_opts=
compute_opts() {
	local varname="$1"
	local optname="${varname//_/-}"
	test -z "$long_opts" || long_opts+=","
	long_opts+="$optname:"
}
exec_options compute_opts


TEMP=$(getopt -o hn --long help,dry-run,debug,$long_opts \
     -n "$(basename $0)" -- "$@")
eval set -- "$TEMP"

while true; do
	case "$1" in
	-h|--help) show_help ; exit 0 ;;
	-n|--dry-run) dry_run=1 ;;
	--debug) debug=1 ;;
	--) shift ; break ;;
	--*)
		optname="${1#--}"
		varname="${optname//-/_}"
		eval "$varname"='"$2"'
		eval "$varname"_tag='0'
		eval "$varname"_input='"$2"'
		shift
		;;
	esac
	shift
done

if test "$#" != 0 ; then
	echo 1>&2 "trop d'argument à la commande"
	show_help 1>&2
	exit 1
fi

#exec_options display_all
if test "$debug" = 1; then
	exec_options set_default
	
	forge_gitroot=/home/users/vdanjean/
	forge_subdir=tmp/test
	name=test
	desc="yo"
	
	exec_options echo_setup
else

	declare -a txt_setup
	while : ; do
		exec_options run_dialog
		case "$name" in
		*.git) ;;
		*) name="$name.git" ;;
		esac
		txt_setup=()
		exec_options show_setup
		case "$action" in
		"create") acname="Créer le dépôt" ;;
		"simulate") acname="Simuler une création"
			    dry_run=1 ;;
		"list") acname="Lister les dépôts" ;;
		esac
		RET=0
		C="$(dialog --title "Résumé des choix" --ok-label "$acname" --extra-button --extra-label "Reconfigurer" \
			--menu "" 0 0 0 "${txt_setup[@]}"  2>&1 >/dev/tty)" || RET="$?"
		case "$RET" in
		0) break ;;
		1) exit 1 ;;
		esac
	done
	clear

fi

echo "Pour réexécuter ce programme avec ces réglages sans interaction, utiliser :"
printf "%s" "$0"
exec_options echo_args
echo
echo

declare -a SSH_CMD
SSH_CMD=( ssh -x -a "$forge_login@$forge_hostname" )
eval "$(forge_get install_hooks :)"

runtest \
	name "Tentative de connexion SSH à la forge " \
	logvalue "$forge_hostname" \
	error "Impossible de se connecter par SSH à la forge" \
	error "login : $forge_login" \
	error "machine : $forge_hostname" \
	error "Vérifiez les paramètres de connexion et vos clés SSH" \
	cmd "${SSH_CMD[@]}" true

if test "$dry_run" != 1 ; then
    case "$forge_gitroot $forge_subdir" in
    *'$HOME'*|*'${HOME}'*)
	RHOME="$(ssh "$forge_login@$forge_hostname" echo '$HOME')"
	motif='$HOME'
	forge_gitroot="${forge_gitroot//$motif/$RHOME}"
	forge_subdir="${forge_subdir//$motif/$RHOME}"
	motif='${HOME}'
	forge_gitroot="${forge_gitroot//$motif/$RHOME}"
	forge_subdir="${forge_subdir//$motif/$RHOME}"
    ;;
    esac
fi

if [ $action = list ]; then
    runtest \
	name "Vérification de la présence du répertoire racine des dépôts Git " \
	logvalue "$forge_gitroot" \
	error "Le répertoire '$forge_gitroot' n'existe pas." \
	error "Contactez l'administrateur du projet $forge_project" \
	error "ou configurez un autre répertoire de base" \
	cmd "${SSH_CMD[@]}" test -d "$forge_gitroot"

    runtest \
	name "Liste des dépôts git disponibles dans " \
	logvalue "$forge_gitroot" \
	option "print" \
	cmd "${SSH_CMD[@]}" find "$forge_gitroot" -type d -name *.git \
		-printf "'\n%p\n'" -exec sed "'s/^/  /'" {}/description '\;' -prune

    echo
    echo "Vous pouvez probablement obtenir un clone de ces dépôts avec la"
    echo "commande suivant (en remplaçant [depot] par une des lignes listées"
    echo "ci-dessus)"
    echo
    echo "git clone git+ssh://$forge_login@$forge_hostname/[depot]"
    echo

    exit 0
fi

forge_dest="$forge_gitroot${forge_subdir:+/$forge_subdir}"
RET=0
runtest \
	name "Vérification de la disponibilité du répertoire cible " \
	logvalue "$forge_dest/." \
	option "allow-fail warn-only" \
	cmd "${SSH_CMD[@]}" test -w "$forge_dest/." \
	|| RET="$?"

if [ "$RET" != 0 ]; then
    runtest \
	name "Récupération du dernier répertoire parent existant" \
	output-var last_dir \
	cmd "${SSH_CMD[@]}" bash -c ': ; rep="'"$forge_dest"'" ; while ! test -d "$rep" ; do rep="$(dirname "$rep")" ; done ; echo "$rep"'

    runtest \
	name "Test d'écriture dans le répertoire parent existant " \
	logvalue "$last_dir" \
	error "Le répertoire '$last_dir' est protégé en écriture." \
	error "Les causes classiques de cette erreurs sont" \
	error "la non inclusion dans le projet $forge_project," \
	error "une erreur dans le nom des répertoires ou du projet" \
	error "ou des permissions erronées pour le répertoire" \
	cmd "${SSH_CMD[@]}" test -w "$last_dir"
    
    runtest \
	name "Création du répertoire cible " \
	logvalue "$forge_dest with mode $last_dir_mode" \
	error "Impossible de créer le répertoire '$forge_dest'" \
	cmd "${SSH_CMD[@]}" mkdir -p "$forge_dest"
else
    last_dir="$forge_dest"
fi

repo="$forge_dest/$name"

runtest \
	name "Vérification que le dépôt Git n'existe pas encore " \
	logvalue "$name" \
	error "Le dépôt '$name' existe déjà" \
	cmd "${SSH_CMD[@]}" test ! -d "$repo"

runtest \
	name "Création du dépôt Git " \
	logvalue "$name" \
	error "Impossible de créer le dépôt '$name'" \
	cmd "${SSH_CMD[@]}" mkdir "$repo"

runtest \
	name "Récupération du mode du dernier répertoire existant" \
	logvalue "$last_dir" \
	output-var last_dir_mode \
	cmd "${SSH_CMD[@]}" stat -c "%a" "$last_dir"

runtest \
	name "Récupération du groupe du dernier répertoire existant " \
        logvalue "$last_dir" \
	output-var last_dir_group \
	cmd "${SSH_CMD[@]}" stat -c "%g" "$last_dir"

runtest \
	name "Récupération du groupe principal de l'utilisateur courant" \
	output-var user_group \
	cmd "${SSH_CMD[@]}" id -g

created_dir="$repo"
prev_dir="$(dirname "$created_dir")"
while [ "$prev_dir" != "$last_dir" -a "$created_dir" != "/" ]; do
    created_dir="$prev_dir"
    prev_dir="$(dirname "$created_dir")"
done
if [ "$created_dir" = "/" ]; then
    # BUG...
    created_dir="$repo"
fi
if [ "$user_group" != "$last_dir_group" ]; then
    runtest \
	name "Recopie récursive du groupe du répertoire parent " \
	logvalue "$created_dir ($last_dir_group)" \
	option "allow-fail warn-only" \
	cmd "${SSH_CMD[@]}" chgrp -R "$last_dir_group" "$created_dir"
fi
runtest \
	name "Recopie récursive du mode du répertoire parent " \
	logvalue "$created_dir ($last_dir_mode)" \
	option "allow-fail warn-only" \
	cmd "${SSH_CMD[@]}" chmod -R "$last_dir_mode" "$created_dir"

if [ "$CREATE_LOCAL" = 1 ]; then
    RET=1
else
    RET=0
    runtest \
	name "Initialisation du dépôt Git " \
	logvalue "$name" \
	option "allow-fail" \
	error "Impossible d'initialiser le dépôt '$name' à distance" \
	error "On va essayer de le faire localement puis de le transférer" \
	cmd "${SSH_CMD[@]}" env GIT_DIR="$repo" git init-db --shared \
	|| RET="$?"
fi

if [ "$RET" != 0 ]; then
    RET=0
    REP="$(mktemp -d)"
    mkdir "$REP/$name"
    runtest \
	name "Création du dépôt localement " \
	logvalue "$REP/$name" \
	option "allow-fail warn-only" \
	error "Impossible d'initialiser le dépôt '$REP/$name'" \
	cmd env GIT_DIR="$REP/$name" git init-db --shared

    runtest \
	name "Transfert du dépôt git sur la forge " \
	logvalue "$name" \
	option "allow-fail" \
	error "Impossible de transférer le dépôt '$REP/$name'" \
	cmd scp -r "$REP/$name/." "$forge_login@$forge_hostname:$repo/." 

    rm -fr "$REP"
fi

runtest \
	name "Configuration de la description du dépôt Git " \
	logvalue "$name" \
	error "Impossible de mettre en place la description du dépôt '$name'" \
	input "$desc" \
	cmd "${SSH_CMD[@]}" bash -c 'cat > "'"$repo/description"'"'

runtest \
	name "Installation du crochet pour l'accès HTTP " \
	logvalue "post-update" \
	option "allow-fail warn-only" \
	error "Impossible de mettre en place le crochet 'post-update'" \
	error "On suppose qu'il est déjà correctement nommé" \
	input "$desc" \
	cmd "${SSH_CMD[@]}" mv "$repo/hooks/post-update".sample "$repo/hooks/post-update" \
	|| true

runtest \
	name "Correction des permissions du crochet post-update " \
	logvalue "" \
	error "Impossible de positionner les permissions du crochet 'post-update'" \
	input "$desc" \
	cmd "${SSH_CMD[@]}" chmod +x "$repo/hooks/post-update"

echo 
echo "Votre dépôt git est configuré"
echo "#############################"
echo "Pour le remplir depuis un projet Git local, tapez les commandes suivantes :"
echo
echo "# Ajout du dépôt de la forge sous le nom 'origin'"
echo "# (dépôt par défault pour les push/pull)"
echo "git remote add origin ssh://$forge_login@$forge_hostname$repo"
echo "# On envoie la branche locale 'master' sur la forge"
echo "git push origin master:master"
echo "# Liaison entre la branche master locale et la branche master du dépôt"
echo "# Ça permet de faire un simple 'git pull' par la suite"
echo "git branch --set-upstream master origin/master"
echo
echo "#############################"
echo "Pour le cloner, tapez :"
echo
echo "git clone git+ssh://$forge_login@$forge_hostname$repo"
echo
